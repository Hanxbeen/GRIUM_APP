server:
  port: 8443

#  ssl:
#    enabled: true
#    key-store: grium.me_20210514HUWQ.jks
#    key-store-password: udlqft
#    key-store-type: PKCS12
#    key-alias: hindsight

spring:
  application:
    name: authserver
  datasource:
    url: jdbc:mysql://k4c104.p.ssafy.io:3306/test1?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ssafy104
    password: ssafyill@sa
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        format-sql: true

  security:
    oauth2:
      client:
        registration:
          kakao:
            clientId: e62a9191e2732cd009b8a8e9cb8dc0b2
            clientSecret: J0utEFOggZ4GZGtEaJheTA99r41zug6X
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            authorization_grant_type: authorization_code
            scope:
              - account_email
              - profile
              - friends
              - birthday
#              - gender
#              - phone_number
            client-authentication-method: POST
            client-name: Kakao

        provider:
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
          kakao:
            authorization_uri: https://kauth.kakao.com/oauth/authorize
            token_uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user_name_attribute: id
app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 3600000
    refreshTokenExpirationMesc: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect

logging:
  level:
    root: INFO

#eureka:
#  instance:
#    preferIpAddress: true
#  client:
#    registerWithEureka: true # 유레카 서비스에 자신을 등록
#    fetchRegistry: true # 레즈스트리의 로컬 복사본 가져오게 허용
#    serviceUrl: # 유레카 클러스터 구축
#      defaultZone: http://localhost:8761/eureka/

# swagger
springdoc:
  version: "@project.version@"
  api-docs:
    path: /api-docs
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  swagger-ui:
    operations-sorter: alpha
    tags-sorter: alpha
    path: /swagger-ui.html
    disable-swagger-default-url: true
    display-query-params-without-oauth2: true
  # controller path 등록
  paths-to-match:
    - /user/**
    - /family/**
    - /propose/**
    - /relation/**


cloud:
  aws:
    credentials:
      accessKey: AKIAXS7MUVFIJETRS5PQ
      secretKey: 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
    s3:
      bucket: grium
    region:
      static: ap-northeast-2
    stack:
      auto: false